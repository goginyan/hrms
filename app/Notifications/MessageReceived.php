<?php

namespace App\Notifications;

use Cmgmyr\Messenger\Models\Message;
use Illuminate\Bus\Queueable;
use Illuminate\Notifications\Notification;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;

class MessageReceived extends Notification
{
    use Queueable;

    /**
     * @var $message Message
     */
    public $message;

    /**
     * Create a new notification instance.
     *
     * @return void
     */
    public function __construct($message)
    {
        $this->message = $message;
    }

    /**
     * Get the notification's delivery channels.
     *
     * @param mixed $notifiable
     *
     * @return array
     */
    public function via($notifiable)
    {
        return ['database', 'broadcast'];
    }

    /**
     * Get the mail representation of the notification.
     *
     * @param mixed $notifiable
     *
     * @return \Illuminate\Notifications\Messages\MailMessage
     */
    public function toMail($notifiable)
    {
        return (new MailMessage)
            ->line('The introduction to the notification.')
            ->action('Notification Action', url('/'))
            ->line('Thank you for using our application!');
    }

    /**
     * Get the array representation of the notification.
     *
     * @param mixed $notifiable
     *
     * @return array
     */
    public function toArray($notifiable)
    {
        return [
            'type'       => 'message', //dynamic field what will be regenerated by the app and contains $this classname
            'text'       => $this->message->body,
            'sender'     => [
                'id'   => $this->message->user->employee->id,
                'name' => $this->message->user->employee->fullName
            ],
            'url'        => route('threads.show', [$this->message->thread, 'read' => $this->id]),
            'message_id' => $this->message->id,
            'thread_id'  => $this->message->thread->id,
            'created_at' => now(),
            'read_at'    => null
        ];
    }
}
